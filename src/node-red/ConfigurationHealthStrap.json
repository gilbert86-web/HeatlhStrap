[
    {
        "id": "94b2571c63d31c56",
        "type": "tab",
        "label": "Flux 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "eaeff92153c22b38",
        "type": "mqtt out",
        "z": "94b2571c63d31c56",
        "name": "",
        "topic": "React_JS_Application_Emetteur",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "77370e70e8576465",
        "x": 1210,
        "y": 140,
        "wires": []
    },
    {
        "id": "59c808b980a3634e",
        "type": "mqtt in",
        "z": "94b2571c63d31c56",
        "name": "TTNRecpteur",
        "topic": "v3/healthstrap-team-f@ttn/devices/lora-device/up",
        "qos": "0",
        "datatype": "json",
        "broker": "a0274ee06f20bf3e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 650,
        "y": 140,
        "wires": [
            [
                "eaeff92153c22b38",
                "8d3b6298eabf8bac"
            ]
        ]
    },
    {
        "id": "021a19c337d17156",
        "type": "function",
        "z": "94b2571c63d31c56",
        "name": "function 1",
        "func": "// Exemple de fonction pour calculer le BPM à partir de la valeur infrarouge\nfunction calculateBPM(irValue) {\n    // Logique pour calculer le BPM basé sur la valeur infrarouge\n    // Ceci est un exemple et doit être adapté à ton algorithme spécifique\n    let bpm = irValue / 1000; // Exemple simplifié\n    return bpm;\n}\n\n// Fonction principale pour Node-RED\nreturn (function(msg) {\n    // Tableau Uint8 reçu\n    // console.log(msg['uplink_message']['frm_payload'])\n    const uint8Array = msg.payload['uplink_message']['frm_payload'];\n\n    // Convertir les trois premiers éléments en la valeur infrarouge originale\n    const irValue = (uint8Array[0] << 16) | (uint8Array[1] << 8) | uint8Array[2];\n\n    // Calculer le BPM basé sur la valeur infrarouge\n    const bpm = calculateBPM(irValue);\n\n    // Retourner la valeur du BPM calculé\n    msg.payload = { bpm: bpm ,_irValue:irValue};\n    return msg;\n})(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "8d3b6298eabf8bac",
        "type": "debug",
        "z": "94b2571c63d31c56",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 280,
        "wires": []
    },
    {
        "id": "2c34c2445164a463",
        "type": "json",
        "z": "94b2571c63d31c56",
        "name": "JsonResponseFromTTN",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 530,
        "y": 500,
        "wires": [
            [
                "021a19c337d17156"
            ]
        ]
    },
    {
        "id": "77370e70e8576465",
        "type": "mqtt-broker",
        "name": "",
        "broker": "32a886debbcf47aeaf3c6a3930fd8df6.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "Test",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a0274ee06f20bf3e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "eu1.cloud.thethings.network",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]